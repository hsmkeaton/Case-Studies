#https://www.kaggle.com/code/heidikeaton/cyclistic-bike-share-case-study

![Cyclistic image.png](attachment:c365ebad-c862-45ac-a170-d751fe6a9aab.png)
# How does a Bike-Share Navigate a Speedy Success?
​
Let us say you are the Director of Marketing, Lily Moreno. It is your job to develop initiatives to promote the bike-share program. It would be my job to analyze the reporting data to help guide Lily to a new marketing strategy...increase the membership size.
​
One approach that appeals to consumer segments is flexible pricing plans like single-ride passes, full-day passes, and annual memberships. Casual riders purchase single-ride or full-day passes, but Lily would like the analytics team to analyze data for converting casual riders into members.
​
To convert casual riders in to memberships, the analysis needs to: 
- Demonstrate how annual members and casual riders differ?
- Why would casual riders buy a membership?
- How would digital media affect marketing tactics?
**Divvy Exercise Full Year Analysis using R Programming**
​
This technical analysis is based on the Divvy case study "'Sophisticated, Clear, and Polished’: Divvy and Data Visualization" written by Kevin Hartman (found here: https://artscience.blog/home/divvy-dataviz-case-study). The data sets are public and all user data have been cleared for privacy purposes.
​
The objective of this script is to consolidate downloaded Divvy data into a single dataframe and then conduct simple analysis to help answer the key question: 
“In what ways do members and casual riders use Divvy bikes differently?”
The following steps will:
* Install required packages
* tidyverse for data import and wrangling
* lubridate for date functions
* ggplot for visualization
​
# ***Step 1: COLLECT DATA***
- Load necessary Libraries
- Upload Divvy data sets from Kaggle
- Rename them 
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyverse)
library(janitor)
library(readr)
Jan2021 = read_csv("../input/cyclistic-case-study-google-certificate/202101-divvy-tripdata/202101-divvy-tripdata.csv")
Feb2021 = read_csv("../input/cyclistic-case-study-google-certificate/202102-divvy-tripdata/202102-divvy-tripdata.csv")
Mar2021 = read_csv("../input/cyclistic-case-study-google-certificate/202103-divvy-tripdata/202103-divvy-tripdata.csv")
Apr2021 = read_csv("../input/cyclistic-case-study-google-certificate/202104-divvy-tripdata/202104-divvy-tripdata.csv")
May2021 = read_csv("../input/cyclistic-case-study-google-certificate/202105-divvy-tripdata/202105-divvy-tripdata.csv")
Jun2021 = read_csv("../input/cyclistic-case-study-google-certificate/202106-divvy-tripdata/202106-divvy-tripdata.csv")
Jul2021 = read_csv("../input/cyclistic-case-study-google-certificate/202107-divvy-tripdata/202107-divvy-tripdata.csv")
Aug2021 = read_csv("../input/cyclistic-case-study-google-certificate/202108-divvy-tripdata/202108-divvy-tripdata.csv")
Sep2021 = read_csv("../input/cyclistic-case-study-google-certificate/202109-divvy-tripdata/202109-divvy-tripdata.csv")
Oct2021 = read_csv("../input/cyclistic-case-study-google-certificate/202110-divvy-tripdata/202110-divvy-tripdata.csv")
Nov2021 = read_csv("../input/cyclistic-case-study-google-certificate/202111-divvy-tripdata/202111-divvy-tripdata.csv")
Dec2021 = read_csv("../input/cyclistic-case-study-google-certificate/202112-divvy-tripdata/202112-divvy-tripdata.csv")
#join all datasets to one
bike_data_list <- rbind(Jan2021, Feb2021, Mar2021, Apr2021, May2021, Jun2021, Jul2021, Aug2021, Sep2021, Oct2021, Nov2021, Dec2021)

#To check more closely the data type for each column
print("**** SUMMARY ****")
summary(bike_data_list)
print("**** Number of Rows ****")
nrow(bike_data_list)

# Add columns to help is for the data analysis
# so I create the columns Date, Month, Day, Year, Weekday, Time and extract them from started_at initial column
bike_data_list$date <- as.Date(bike_data_list$started_at) 
# Get the month from date and add the value to a new column
bike_data_list$month <- format(as.Date(bike_data_list$date), "%b")
# Get the day from date and add the value to a new column
bike_data_list$day <- format(as.Date(bike_data_list$date), "%d")
# Get the year from date and add the value to a new column
bike_data_list$year <- format(as.Date(bike_data_list$date), "%Y")  
# Find the weekday from date and add the value to a new column
bike_data_list$weekday <- format(as.Date(bike_data_list$date), "%A")  
# Get the time from date and add the value to a new column
bike_data_list$time <- format(bike_data_list$started_at, format = "%H:%M") 
# Change format for the time column for purposes later
bike_data_list$time <- as.POSIXct(bike_data_list$time, format = "%H:%M")  

# We are also performing some calculations to help reach in conclusions
# We will calculate ride length in minutes
bike_data_list$ride_length <- (as.double(difftime(bike_data_list$ended_at, bike_data_list$started_at))) /60  

# For better understanding, I will rename the following columns
bike_data_list <- rename(bike_data_list, customer_type = member_casual) 
bike_data_list <- rename(bike_data_list, bike_type = rideable_type)
# ***Step 2: CLEAN THE DATA***
- Remove Duplicates
- Remove rides with negative values
- Remove rides longer than 24 hours
bike_data_list <- distinct(bike_data_list)
bike_data_list <- bike_data_list[!bike_data_list$ride_length<1,]
bike_data_list <- bike_data_list[!bike_data_list$ride_length>1440,]

print("**** DATA CLEANING ****")
summary(bike_data_list)
print("**** Number of Rows ****")
nrow(bike_data_list)

# Display more information about the range of values of ride_length. This includes
# the mininimum value, the  1st quarter, the median, the mean, the 3rd quarter and the max value
print("**** FAMILIARIZE WITH RIDE LENGTH VALUES ****")
summary(bike_data_list$ride_length)  

# Get an idea of the customer type analogy in the dataset
print("**** CUSTOMER TYPE ****")
table(bike_data_list$customer_type)

# Get the total ride length per customer type (in minutes)
print("**** TOTAL RIDES PER CUSTOMER TYPE ****")
setNames(aggregate(ride_length ~ customer_type, bike_data_list, sum), c("customer_type", "total_ride_length(mins)"))

# Sort the data so that when you check the ata set, the month and the weekday are displayed in the normal order
bike_data_list$weekday <- ordered(bike_data_list$weekday, levels=c("Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday", "Sunday"))
bike_data_list$month <- ordered(bike_data_list$month, levels=c("Jan", "Feb", "Mar", "Apr",  "May", "Jun","Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
# ***Step 3: ANALYZE THE DATA***
- Rides by customer type
- Weekday ride lengths by customer type
- Weekday total number of rides and averages by customer type
# Check the rides based on customer type
bike_data_list %>% 
  group_by(customer_type) %>% 
  summarise(min_length = min(ride_length), max_length = max(ride_length),median_length = median(ride_length), mean_length = mean(ride_length))

# Check the ride lengths for each weekday by customer type
aggregate(bike_data_list$ride_length ~ bike_data_list$customer_type + bike_data_list$weekday, FUN = median)

# Check the total number of rides and averages per weekday and customer type
bike_data_list %>% 
  group_by(customer_type, weekday) %>% 
  summarise(total_rides = n(), avg_ride = mean(ride_length)) %>% 
  arrange(weekday)
  # ***Step 4: VISUALIZE THE DATA***
- Total rides by weekday/customer type
- Total rides per month/customer type
- Total rides per weekday/month/customer type
- Average ride length per weekday/customer type
- Average ride length per month/customer type
- Total rented bikes per weekday/bike type
- Total rented bikes per month/bike type
- Total rides per customer type for the year
- 24 hour timeline per demand
# Create a bar chart with the total rides per weekday and customer type
bike_data_list %>%    
  group_by(customer_type, weekday) %>% 
  summarise(number_of_rides = n() ) %>% 
  arrange(customer_type, weekday) %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = customer_type)) + geom_col(position = "dodge") + 
  labs(x= 'Weekday', y='Total Number of Rides', title='Rides per Weekday', fill = 'Customer Type') +
  scale_y_continuous(breaks = c(250000, 400000, 550000), labels = c("250K", "400K", "550K"))

# Create a bar chart with the total rides per month and customer type
bike_data_list %>%   
  group_by(customer_type, month) %>%  
  summarise(total_rides = n(),`average_duration_(mins)` = mean(ride_length)) %>% 
  arrange(customer_type) %>% 
  ggplot(aes(x=month, y=total_rides, fill = customer_type)) + geom_col(position = "dodge") + 
  labs(x= "Month", y= "Total Number of Rides", title = "Rides per Month", fill = "Customer Type") + 
  scale_y_continuous(breaks = c(100000, 200000, 300000, 400000), labels = c("100K", "200K", "300K", "400K")) + 
  theme(axis.text.x = element_text(angle = 45))

# Create a bar chart with the total rides per weekday each month for each customer type
bike_data_list %>%   
  group_by(customer_type, month, weekday) %>%  
  summarise(total_rides = n(),`average_duration_(mins)` = mean(ride_length)) %>% 
  arrange(customer_type) %>% 
  ggplot(aes(x=weekday, y=total_rides, fill = customer_type)) + 
  geom_col(position = "dodge") + 
  facet_wrap(~month) + 
  labs(x= "Month", y= "Total Number of Rides", title = "Total Rides per Weekday each Month", fill = "Customer Type") + 
  scale_y_continuous(breaks = c(25000, 50000, 75000, 100000), labels = c("25K","50K","75K", "100K")) + 
  theme(axis.text.x = element_text(angle = 40))


# Create a bar chart with the average ride length per weekday and customer type
bike_data_list %>%   
  group_by(customer_type, weekday) %>% 
  summarise(average_ride_length = mean(ride_length)) %>% 
  ggplot(aes(x=weekday, y = average_ride_length, fill = customer_type))+
  geom_col(position = "dodge") + 
  labs (x="Weekday", y="Average Ride Length(min)", title = "Average Ride Length by Customer Type and Weekday",fill = "Customer Type") 

# Create a bar chart with the average ride length per month and customer type
bike_data_list %>%  
  group_by(customer_type, month) %>% 
  summarise(average_ride_length = mean(ride_length)) %>% 
  ggplot(aes(x=month, y = average_ride_length, fill = customer_type))+ 
  geom_col(position = "dodge") +
  labs (x="Month", y = "Average Ride Length(min)", title = "Average Ride Length by Customer Type and Month", fill = "Customer Type") + 
  theme(axis.text.x = element_text(angle = 45))

# Create a bar chart with the total rented bikes per bike type
bike_data_list %>%    
  ggplot(aes(x = bike_type, fill = customer_type)) + geom_bar(position = "dodge") + 
  labs(x= 'Bike Type', y='Number of Rentals', title='Bike Type Breakdown', fill = 'Customer Type') +
  scale_y_continuous(breaks = c(500000, 1000000, 1500000), labels = c("500K", "1Mil", "1.5Mil"))

# Create a bar chart with the total rented bikes per weekday per bike type
bike_data_list %>%    
  group_by(bike_type, weekday) %>% 
  summarise(number_of_rides = n() ) %>% 
  arrange(bike_type, weekday) %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = bike_type)) + geom_col(position = "dodge") + 
  labs(x= 'Weekday', y='Total Number of Rides', title='Rides per Weekday', fill = 'Bike Type') +
  scale_y_continuous(breaks = c(250000, 400000, 550000), labels = c("250K", "400K", "550K"))

# Create a bar chart with the total rented bikes per month per bike type
bike_data_list %>%  
  group_by(bike_type, month) %>%  
  summarise(total_rides = n(),`average_duration_(mins)` = mean(ride_length)) %>% 
  arrange(bike_type) %>% 
  ggplot(aes(x=month, y=total_rides, fill = bike_type)) + geom_col(position = "dodge") + 
  labs(x= "Month", y= "Total Number of Rides", title = "Rides per Month", fill = "Bike Type") + 
  scale_y_continuous(breaks = c(100000, 200000, 300000, 400000), labels = c("100K", "200K", "300K", "400K")) + 
  theme(axis.text.x = element_text(angle = 45))

# Create a bar chart with the total rides per customer type through the year
bike_data_list %>%  
  group_by(customer_type, date) %>% 
  summarise(number_of_rides = n()) %>% 
  ggplot(aes(x=date, y = number_of_rides, color = customer_type))+ 
  geom_line(size=0.75) +
  labs (x="Date", y = "Total Number of Rides", title = "Rides by Customer type the whole Year", color = "Customer Type") + 
  theme(axis.text.x = element_text(angle = 45))

# Create a line chart with the 24h demand of bikes
bike_data_list %>%     
  group_by(customer_type, time) %>% 
  summarise(total_rides = n()) %>% 
  ggplot(aes(x=time, y=total_rides, color = customer_type, group = customer_type)) +
  geom_line() + scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M", expand = c(0,0)) +
  theme(axis.text.x = element_text(angle = 45)) +
  labs(title ="Demand Throughout the Day", x = "Time", y = "Total Rides")
  
 # ***Step 5: RECOMMENDATIONS***
- Memberships can be converted to not just single ride or day passes but seasonal passes as well.
- Market strategies could begin in early spring enticing those at the end of summer to convert their seasonal pass to an annual pass at the end of their term at an introductory discount.
- Offer discounts in introdutory values according to pass tiers converting single into daily, daily into seasonal, and seasonal to an annual pass.

